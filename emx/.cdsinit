;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; $File: //pdk/22FDSOI/22FDX/rel/22FDX-EXT/22FDX-EXT_V1.0_2.0a/22FDX-EXT/DesignEnv/VirtuosoOA/setup/pdk.cdsinit $
; $Revision: #1 $
;
; Last Changed:    $Author: mjose $
;                  $DateTime: 2020/11/09 22:22:18 $
;                  $Change: 564075 $
;
; Description:     This SKILL file contains recommended settings for
;                  Cadence/Virtuoso 22FDX PDK libraries. The PDK library
;                  initialization loads this file if the GF_PDK_CDSINIT
;                  environment variable is not set. If the environmet variable
;                  is set and the value is a path to an alternative
;                  initizalization file, that file is loaded instead.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; The information contained herein is confidential and is the property of
; GLOBALFOUNDRIES and/or its licensors.  GLOBALFOUNDRIES reserves all
; proprietary, design, manufacturing, reproduction, use, sales and other rights
; in the information herein, in its products and services, and to any article or
; process utilizing such information, except to the extent that rights are
; expressly granted to others.
; 
; This document is for informational purposes only, is current only as of the
; date of publication and is subject to change by GLOBALFOUNDRIES at any time
; without notice.  While precautions have been taken in the preparation of the
; information herein, it may contain technical inaccuracies, omissions and
; typographical errors. GLOBALFOUNDRIES is under no obligation to update or
; otherwise correct this information.
; 
; All information contained herein is provided "AS IS."  GLOBALFOUNDRIES MAKES
; NO REPRESENTATIONS AND DISCLAIMS ALL WARRANTIES OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OF
; NONINFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, WITH
; RESPECT TO THE INFORMATION CONTAINED HEREIN.
; 
; Terms and conditions applicable to the purchase, quality and use of
; GLOBALFOUNDRIES' products and services are as set forth in your organization's
; signed agreement with GLOBALFOUNDRIES or in GLOBALFOUNDRIES' Standard Terms
; and Conditions of Sale.  Unless otherwise authorized in a signed agreement
; with GLOBALFOUNDRIES, GLOBALFOUNDRIES' products and services are NOT intended
; for use in applications such as implantation, life support, or other hazardous
; uses where malfunction could result in death, bodily injury, or catastrophic
; property damage.
; 
; GLOBALFOUNDRIES, the GLOBALFOUNDRIES logo and combinations thereof are
; trademarks of GLOBALFOUNDRIES Inc. in the United States and/or other
; jurisdictions. Other product or service names are for identification purposes
; only and may be trademarks or service marks of their respective owners.
; 
; (c) GLOBALFOUNDRIES Inc. 2020. Unless otherwise indicated, all rights reserved.
; Do not copy or redistribute except as expressly permitted by GLOBALFOUNDRIES.

;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;
; Environment variables
;
when((getShellEnvVar("CDS_Netlisting_Mode") != "Analog") &&
      getd('cdsSetNetlistMode)
   ;; required to enable CDF look-up and callbacks
   setShellEnvVar("CDS_Netlisting_Mode" "Analog")
   cdsSetNetlistMode()
) ; when

let(((pdkHomeEnv "GF_PDK_HOME") pdkHome toolDirEnv toolDir env path
      pattern replacement)
   pdkHome = getShellEnvVar(pdkHomeEnv)
   if( (pdkHome && isDir(pdkHome)) then
      
      pattern = pcreCompile(sprintf(nil "^%s" pdkHome))
      replacement = sprintf(nil "${%s}" pdkHomeEnv)
      fprintf(stdout "\t\t%-28s : %s\n" pdkHomeEnv pdkHome )
      
      foreach(tool '(calibreDRC calibreLVS calibreFILLGEN perc ldl xact
            pvsDRC pvsLVS pvsFILLGEN spectre hspice)
         ;; determin environment variable name for each 'tool'
         toolDirEnv = caseq(tool
               (calibreDRC      "TECHDIR_DRC")
               (calibreLVS      "TECHDIR_LVS")
               (calibreFILLGEN  "TECHDIR_FILLGEN")
               (perc            "TECHDIR_PERC")
               (ldl             "TECHDIR_LDL")
               (xact            "TECHDIR_XACT")
               (pvsDRC          "TECHDIR_DRC_PVS")
               (pvsLVS          "TECHDIR_LVS_PVS")
               (pvsFILLGEN      "TECHDIR_FILLGEN_PVS")
               (spectre         "SPECTRE_MODEL_PATH")
               (hspice          "HSPICE_MODEL_PATH"))
         
         ;; if the tool environment variable is not already set, set it
         ;; to expected location if it exists
         unless(getShellEnvVar(toolDirEnv)
            toolDir = sprintf(nil "%s/%s" pdkHome caseq(tool
                     (calibreDRC        "DRC/Calibre")
                     (calibreLVS        "LVS/Calibre")
                     (calibreFILLGEN    "FILLGEN/Calibre")
                     (perc              "ESD/PERC")
                     (ldl               "ESD/PERC_LDL")
                     (xact              "PEX/xACT")
                     (pvsDRC            "DRC/PVS")
                     (pvsLVS            "LVS/PVS")
                     (pvsFILLGEN        "FILLGEN/PVS")
                     (spectre           "Models/Spectre/models")
                     (hspice            "Models/HSPICE/models")))
            when(isDir(toolDir) setShellEnvVar(toolDirEnv toolDir)))
         
         toolDir = getShellEnvVar(toolDirEnv)
         fprintf(if((toolDir && isDir(toolDir)) stdout woport)
            "\t\t%-28s : %s\n" toolDirEnv ((toolDir &&
                  pcreReplace(pattern toolDir replacement 1)) || "nil"))
         
         ;; set tool specific environment variables
         when((toolDir && isDir(toolDir))
            env = caseq( tool
                  (calibreFILLGEN   "MGC_CALIBRE_VIEWER_MENU_CMDS")
                  (pvsDRC           "PVSUI_DRC_PRESETS_FILE")
                  (pvsLVS           "PVSUI_LVS_PRESETS_FILE"))
            when(env
               unless(getShellEnvVar(env)
                  path = sprintf(nil "%s/%s" toolDir caseq(tool
                           (calibreFILLGEN  "runset/fillgen_menu.il")
                           (pvsDRC          "runset/virtuoso6.drc_preset")
                           (pvsLVS          "runset/virtuoso6.lvs_preset")))
                  when(isFile(path)
                     setShellEnvVar(env path))
               ) ; unless
               path = getShellEnvVar(env)
               fprintf(if((path && isFile(path)) stdout woport)
                  "\t\t%-28s : %s\n" env ((path &&
                        pcreReplace(pattern path replacement 1)) || "nil"))
            ) ; when
         ) ; when
      ) ; foreach
   else
      fprintf(woport "\t\t%-28s : %s\n" pdkHomeEnv (pdkHome || "nil") )
   ) ; if
) ; let

;-------------------------------------------------------------------------------
;
; cdsenv settings
;
let(((tools envGetAvailableTools()))
   
   when(member("layout" tools)
      ; Make sure vias are created based on constraint defintions rather
      ; than default values set in the via definition
      envSetVal("layout" "viaParamCalcMode"     'cyclic "minRules"  )
      envSetVal("layout" "wireViaParamCalcMode" 'cyclic "minRules"  )
      
      ; markNet exclude purposes
      envSetVal("layout" "markNetExcludePurposes" 'boolean t)
      
      ; Voltage Dependent Rules (VDR) - Low/Hight Voltage Purposes
      envSetVal("layout" "vdrLowVoltagePurpose"  'string "lo")
      envSetVal("layout" "vdrHighVoltagePurpose" 'string "hi")
   ) ; when
   
   when(member("layoutXL" tools)
      ; Required setting to ensure correct layout generation/update for
      ; hierarchical schematic pcells such as the logic gates from the PDK
      ; library.
      ; See Virtuoso Layout Suite XL User Guide: lxEvalCDFCallbacks,
      ; lxCDFCallbackParams, lxGetSignifDigits
      envSetVal("layoutXL" "lxEvalCDFCallbacks" 'boolean t)
      envSetVal("layoutXL" "lxGetSignifDigits" 'int 10)
   ) ; when
   
   when(member("ams" tools)
      ; Required setting to netlist schematic pcells: "AMS-UNL" or "OSS-based"
      envSetVal("ams.envOpts" "netlisterMode"         'string     "AMS-UNL" )
   ) ; when
   
   when(member("adexl" tools)
      envSetVal("adexl.monte" "samplingMethod"         'string     "random" )
   ) ; when
   
   when(member("spectre" tools)
      ; spectre setup - only set if spectre.envOpts/modelFiles setting is blank
      when(pcreMatchp("^\\s*$" envGetVal("spectre.envOpts" "modelFiles"))
         ; netlist the include files before the design variables
         envSetVal("spectre.envOpts" "netlistModelFileFirst" 'boolean t)
         
         ;; set modelFiles
         envSetVal("spectre.envOpts" "modelFiles" 'string
            sprintf(nil "%s\n%s\n%s"
               "$SPECTRE_MODEL_PATH/design_wrapper.lib.scs;tt_pre"
               "#;$SPECTRE_MODEL_PATH/design_wrapper_rf.lib.scs;tt_pre"
               "#;$SPECTRE_MODEL_PATH/design_wrapper_mmw.lib.scs;tt_pre")))
      
      ;;Default settings as per modelling team
      ;Enable Constant current Vth estimation (choices are "std" or "vthcc")
      envSetVal("spectre.opts" "vthmod" 'string "vthcc")
      ;Constant current definition for NMOS/PMOS for Vth estimation
      envSetVal("spectre.opts" "ivthn" 'string "300e-9")
      envSetVal("spectre.opts" "ivthp" 'string "70e-9")
      ;Width/Length offset to be used for constant current  Vth estimation
      envSetVal("spectre.opts" "ivthw" 'string "0")
      envSetVal("spectre.opts" "ivthl" 'string "0")
      envSetVal("spectre.opts" "additionalArgs" 'string "vdsatmod=gds")
   ) ; when
   
   when(member("hspiceD" tools)
      ; hspiceD setup - only set if hspiceD.envOpts/modelFiles setting is blank
      when(pcreMatchp("^\\s*$" envGetVal("hspiceD.envOpts" "modelFiles"))
         ; netlist the include files before the design variables
         envSetVal("hspiceD.envOpts" "netlistModelFileFirst" 'boolean t)
         
         ;; set modelFiles
         envSetVal("hspiceD.envOpts" "modelFiles" 'string
            sprintf(nil "%s\n%s\n%s"
               "$HSPICE_MODEL_PATH/design_wrapper.lib;tt_pre"
               "#;$HSPICE_MODEL_PATH/design_wrapper_rf.lib;tt_pre"
               "#;$HSPICE_MODEL_PATH/design_wrapper_mmw.lib;tt_pre")))
      ;;Default settings as per modelling team
      envSetVal("hspiceD.opts" "ADDITIONAL_ARGUMENTS"
         'string "ivthn=300e-9 ivthp=70e-9")
   ) ; when
   
) ; let

;-------------------------------------------------------------------------------
;
; Dual/Multi patterning
;
when( pcreMatchp("^ICADV" cadr(parseString(getVersion(t))))
   
   ; Turn on XStream GUI field for coloring
   when(getd('xstSetField) xstSetField("enableColoring" "true"))
   when(getd('xstInSetField) xstInSetField("enableColoring" "true"))
   ; enables option for Calibre Interactive Layout Export
   unless((boundp('streamOutKeys) && listp(streamOutKeys) &&
         errset(streamOutKeys->enableColoring=t))
      streamOutKeys = '(nil enableColoring t))
   
   ; Turn on Oasis field for coloring
   when(getd('xoasSetField) xoasSetField("enableColoring" "true"))
   when(getd('xoasInSetField) xoasInSetField("enableColoring" "true"))
   ; enables option for Calibre Interactive Layout Export
   unless((boundp('oasisOutKeys) && listp(oasisOutKeys) &&
         errset(oasisOutKeys->enableColoring=t))
      oasisOutKeys = '(nil enableColoring t))
   
) ; when

;-------------------------------------------------------------------------------
;
; Adds selected message IDs to XStream in/out noWarn option
;
; XSTRM-31:  Layer map file contains duplicate entries for Stream
;            layer:datatype.
;
;            This warning is generated since Mx:drawing, Mx:vdd, Mx:gnd
;            layer-purpose-pairs map to the same Stream layer:datatype.
;            On StreamIn operation, Mx:vdd, and Mx:gnd will be ignored and
;            corresponding layer:datatype get mapped to Mx:drawing.
;
; XSTRM-155: Ignoring the Stream layer:datatype pair in the object map file
;            because it is also defined in the layer map file. Additionally,
;            shapes in GDS with properties indicating they were translated
;            from objects in the OpenAccess database will be translated back
;            to objects. The remaining shapes will be translated to shapes.
;
;            This warning is generated because for every xx:exclude in
;            layermap is mapped to same layer number:datatype in objectmap file
;            Objects created in Innovus are not dropped during GDS/OASIS export
;            operation from Virtuoso, due to this mapping.

let(
   (
      ( xstInNoWarn     '("31" "155"))
      ( xstNoWarn       '())
      noWarnList
   )
   
   when(getd('xstInGetField) && getd('xstGetField)
      foreach( key '(xstIn xst)
         noWarnList = parseString(eval(list(concat(key 'GetField) "noWarn")))
         foreach( warning eval(concat(key 'NoWarn))
            unless( member(warning noWarnList)
               noWarnList = cons(warning noWarnList)))
         eval(list(concat(key 'SetField) "noWarn" buildString(noWarnList)))
      ) ; foreach
   ) ; when
   
) ; let

;-------------------------------------------------------------------------------
;
; Adds selected message IDs to XOasis in/out noWarn option
;
; XOASIS-31: Layer map file contains duplicate entries for Oasis layer:datatype
;
;            This warning is generated since Mx:drawing, Mx:vdd, Mx:gnd
;            layer-purpose-pairs map to the same Oasis layer:datatype.
;            On OasisIn operation, Mx:vdd, and Mx:gnd will be ignored and
;            corresponding layer:datatype get mapped to Mx:drawing.
;
; XOASIS-155:Ignoring the Oasis layer:datatype pair in the object map file
;            because it is also defined in the layer map file. Additionally,
;            shapes in GDS with properties indicating they were translated
;            from objects in the OpenAccess database will be translated back
;            to objects. The remaining shapes will be translated to shapes.
;
;            This warning is generated because for every xx:exclude in
;            layermap is mapped to same layer number:datatype in objectmap file
;            Objects created in Innovus are not dropped during GDS/OASIS export
;            operation from Virtuoso, due to this mapping.
;


let(
   (
      ( xoasInNoWarn     '("31" "155"))
      ( xoasOutNoWarn    '())
      noWarnList
   )
   
   when(getd('xoasInGetField) && getd('xoasOutGetField)
      foreach( key '(xoasIn xoasOut)
         noWarnList = parseString(eval(list(concat(key 'GetField) "noWarn")))
         foreach( warning eval(concat(key 'NoWarn))
            unless( member(warning noWarnList)
               noWarnList = cons(warning noWarnList)))
         eval(list(concat(key 'SetField) "noWarn" buildString(noWarnList)))
      ) ; foreach
   ) ; when
   
) ; let


;-------------------------------------------------------------------------------
;
; Calibre Interactive
;
when((getd('hiGraphicMode) && hiGraphicMode())
   unless( (boundp('MGC_CALIBRE_GLOBALS_SKL_LOADED) &&
         MGC_CALIBRE_GLOBALS_SKL_LOADED)
      let( (calibreHome filePath)
         calibreHome = getShellEnvVar("CALIBRE_HOME") ||
               getShellEnvVar("MGC_HOME")
         when( calibreHome && isDir(calibreHome)
            filePath = sprintf(nil "%s/lib/calibre.skl" calibreHome)
            when( isFile(filePath) loadi(filePath)))
      ) ; let
   ) ; unless
) ; when

;-------------------------------------------------------------------------------
;
; Calibre Interactive: mgc_start_calibre_trigger
;
inScheme(
   
   importSkillVar( mgc_eview_globals )
   
   define( mgc_start_calibre_trigger  nil )
   
   let((percRunset)
      
      procedure(getToolDirEnv(tool cvId "sd")
         cond(
            ( (eq(tool 'perc) && (cvId->cellViewType == "maskLayout"))
               "TECHDIR_LDL")
            ( t
               sprintf(nil "TECHDIR_%s" upperCase(tool))))
      ) ; procedure
      
      procedure(getRunsetEnv(tool "s")
         sprintf(nil "MGC_CALIBRE_%s_RUNSET_FILE" upperCase(tool))
      ) ; procedrue
      
      ; store user setting to restore since PERC and PERC-LDL share the
      ; same runset environment variable
      percRunset = getShellEnvVar(getRunsetEnv('perc))
      
      ;-------------------------------------------------------------------------
      ;
      ; Calibre Interactive Trigger:
      procedure(start_calibre_trigger(tool win)
         let(( (cvId win->cellView) tfId libId
               toolDir toolDirEnv runset runsetEnv config configEnv
               stackName stackNameEnv pkgOption)
            
            tfId = techGetTechFile(cvId)
            libId = ddGetObj(tfId->libName)
            when( (libId->pdkInfo->pdkVendor == "GLOBALFOUNDRIES")
               
               tool = concat(tool)
               caseq( tool
                  ( (drc lvs perc xact)
                     printf("//\tmgc_start_calibre_trigger:\n")
                     
                     ;; toolDir
                     toolDirEnv = getToolDirEnv(tool cvId)
                     toolDir = getShellEnvVar(toolDirEnv)
                     if( toolDir then
                        printf("//\t\t%-30s: %s\n" toolDirEnv toolDir)
                        
                        ;; runset
                        runsetEnv = getRunsetEnv(tool)
                        when(eq(tool 'perc)
                           ;; restore startup setting for perc runset
                           if( percRunset
                              setShellEnvVar(runsetEnv percRunset)
                              unsetShellEnvVar(runsetEnv)))
                        
                        runset = getShellEnvVar(runsetEnv)
                        unless( runset
                           runset = sprintf(nil "%s/runset/%s.runset"
                                 toolDir tool)
                           when( isFile(runset)
                              setShellEnvVar(runsetEnv runset)))
                        printf("//\t\t%-30s: %s\n" runsetEnv
                           (runset || "nil"))
                        
                        ;; stackName
                        stackNameEnv = "BEOL_STACK"
                        stackName = techGetParam(tfId "metalStackName")
                        unless( ((!stackName) || (stackName == "superstack"))
                           setShellEnvVar(stackNameEnv stackName))
                        stackName = getShellEnvVar(stackNameEnv)
                        printf("//\t\t%-30s: %s\n" stackNameEnv
                           (stackName || "nil"))
                        
                        when( memq(tool '(xact))
                           ;; config
                           configEnv = sprintf(nil "MGC_CALIBRE_%s_CONFIG_FILE"
                                 upperCase(tool))
                           config = getShellEnvVar(configEnv)
                           unless( config
                              config = sprintf(nil "%s/runset/%s.ci.config"
                                    toolDir tool)
                              when( isFile(config)
                                 setShellEnvVar(configEnv config)))
                           printf("//\t\t%-30s: %s\n" configEnv
                              (config || "nil"))
                           
                           ;; pkgOption
                           pkgOption = getShellEnvVar("PKG_OPTION")
                           if(stringp(pkgOption) &&
                                 pcreMatchp("thick" pkgOption) then
                              pkgOption = "thick"
                           else
                              pkgOption = ""
                           )
                           mgc_eview_globals->cellMapFile = sprintf(nil
                                 "%s/calview/22fdsoi_%s%s_calview.cellmap"
                                 toolDir stackName pkgOption)
                           printf("//\t\t%-30s: %s\n" "cellMapFile"
                              (mgc_eview_globals->cellMapFile || "nil"))
                        ) ; when
                     else
                        printf("//\t\t%-30s: unknown\n" toolDirEnv)
                     ) ; if
                     
                     printf("//\n")
                  )
                  ( (pex dfm)
                     t
                  )
               ) ; case
            ) ; when
            t
         ) ; let
      ) ; procedure
      
      ;; make public
      mgc_start_calibre_trigger = start_calibre_trigger
      
      t
   ) ; let
) ; inScheme
